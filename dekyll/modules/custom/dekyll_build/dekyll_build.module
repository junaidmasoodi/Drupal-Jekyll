<?php

/**
 * @file
 * Build a Jekyll site locally or remotely.
 */

use Symfony\Component\Yaml\Dumper;

/**
 * Get the path of the local site built with Jekyll.
 *
 * @param $nid
 *   The node ID or object of the branch or page.
 * @param $real_path
 *   FALSE will return a stream wrapper (build://...), TRUE
 *   will return the full path.
 */
function dekyll_build_get_build_path($nid, $real_path = FALSE) {
  $path = dekyll_repository_get_repo_path($nid);
  $path = str_replace('public://repos', 'build://', $path);

  if (!file_exists($path)) {
    drupal_mkdir($path, NULL, TRUE);
  }

  return !$real_path ? $path : drupal_realpath($path);
}

/**
 * Build a local Jekyll site.
 */
function dekyll_build_build_jekyll_site($branch_id, Message $message = NULL) {
  // Notify client via Socket.io, build is starting.
  $nodejs_message = (object) array(
    'broadcast' => TRUE,
    'data' => (object) array(
      'build' => FALSE,
    ),
  );

  $path = dekyll_repository_get_repo_path($branch_id);
  $build_path = dekyll_build_get_build_path($branch_id);
  $wrapper = entity_metadata_wrapper('node', $branch_id);

  // Create an overriding _config file under .git/ and change the BASE_PATH to
  // point to the "build path".
  $dummy_config_path = $path . '/.git/_config.yml';

  // @todo: Inject parser and dumper.
  $dumper = new Dumper();
  $yaml = array();

  if ($url = $wrapper->field_build_remote_url->value()) {
    $url .= str_replace('public://repos', '/builds/', dekyll_repository_get_repo_path($branch_id));
  }
  else {
    $url = file_create_url($build_path);
  }

  $yaml['production_url'] = $url;
  $yaml['JB']['BASE_PATH'] = $url;
  // Use "safe" mode, so BASE_PATH is used.
  $yaml['safe'] = TRUE;

  file_put_contents($dummy_config_path,  $dumper->dump($yaml, 5));

  $path = drupal_realpath($path);
  $build_path = drupal_realpath($build_path);

  // Execute "jekyll build" command using the original config, and the dummy
  // config that overrides the
  $output = array();

  exec("jekyll build --source $path --destination $build_path --config $path/_config.yml,$path/.git/_config.yml", $output);

  if (drupal_is_cli()) {
    drush_log(dt('Branch @id jekyll site was built on @dest', array('@id' => $branch_id, '@dest' => $build_path)));
  }

  if (!empty($message)) {
    $message_wrapper = entity_metadata_wrapper('message', $message);
    $message_wrapper->field_jekyll_build_status->set(DEKYLL_MESSAGE_BUILD_DONE);
    $message_wrapper->save();
  }

  $remote_path = rtrim($wrapper->field_build_remote_path->value(), '/');
  $remote_ssh = str_replace('ssh ', '', $wrapper->field_build_remote_ssh->value());

  $nodejs_message->data->build = FALSE;

  if (!$remote_path || !$remote_ssh) {
    nodejs_send_message($nodejs_message);
    return;
  }

  // Add the repo path.
  $remote_path .= str_replace('public://repos', '/builds/', dekyll_repository_get_repo_path($branch_id));

  if (drupal_is_cli()) {
    drush_log(dt('Starting rsync'));
  }

  $output = array();
  // Create build directory, and Rsync to remote.
  exec("ssh $remote_ssh mkdir -p $remote_path && rsync -azvr $build_path/ $remote_ssh:$remote_path", $output);

  if (drupal_is_cli()) {
    drush_log(dt('Branch @id rsynced to @dest', array('@id' => $branch_id, '@dest' => "$remote_ssh:$remote_path")));
  }


  nodejs_send_message($nodejs_message);

  $message_wrapper->field_rsync_status->set(DEKYLL_MESSAGE_BUILD_RSYNC_DONE);
  $message_wrapper->save();
}

/**
 * Implements hook_stream_wrappers().
 */
function dekyll_build_stream_wrappers() {
  $wrappers = array(
    'build' => array(
      'name' => t('Public Jekyll sites'),
      'class' => 'DekyllPublicStreamWrapper',
      'description' => t('Sites built by Jekyll.'),
      'type' => STREAM_WRAPPERS_LOCAL_NORMAL,
    ),
  );

  return $wrappers;
}
