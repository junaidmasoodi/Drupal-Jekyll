<?php
/**
 * @file
 * Code for the Dekyll Post feature.
 */

include_once 'dekyll_page.features.inc';

use Symfony\Component\Yaml\Parser;

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function dekyll_page_form_node_form_alter(&$form, $form_state, $form_id) {
  $node = $form['#node'];

  if (in_array($node->type, array('repository', 'branch'))) {
    return;
  }

  if (empty($node->nid)) {
    // Try to set the layout by the node type.
    _dekyll_page_set_layout_by_node_type($form);

    $form['field_file_path'][LANGUAGE_NONE][0]['value']['#attached']['js'][] = drupal_get_path('module', 'dekyll_page') . '/js/dekyll_page.js';
  }

  // We will set the repository by the branch.
  $form[OG_AUDIENCE_FIELD]['#access'] = FALSE;
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Help the file name creation for post content type.
 *
 * @todo: Add validate to make sure file is under _posts.
 */
function dekyll_page_form_post_node_form_alter(&$form, $form_state) {
  $node = $form['#node'];
  $file_path_parts = array();

  if ($default_value = &$form['field_file_path'][LANGUAGE_NONE][0]['value']['#default_value']) {
    // @todo: Fix when directory is _drafts.
    $file_path_parts = explode('/', $default_value, 2);
    $path_info = pathinfo(substr($file_path_parts[1], 11));

    $default_value = $path_info['filename'];
    $extension = $path_info['extension'];
  }
  else {
    $extension = 'md';
  }

  // Add elements to select the directory and date prefix of the post file.
  $element = array();
  $element['directory'] = array(
    '#title' => t('Directory'),
    '#title_display' => 'invisible',
    '#type' => 'select',
    '#options' => array(
      '_posts' => '_posts',
      '_drafts' => '_drafts',
    ),
    '#weight' => -10,
    '#default_value' => !empty($file_path_parts) ? $file_path_parts[0] : '_posts',
  );

  $element['file_date'] = array(
    '#title' => t('File date'),
    '#title_display' => 'invisible',
    '#date_label_position' => 'invisible',
    '#type' => 'date_popup',
    '#date_format' => 'Y-m-d',
    '#weight' => -5,
    '#default_value' => !empty($file_path_parts) ? substr($file_path_parts[1], 0, 10) : date('Y-m-d'),
    '#size' => 10,
    '#prefix' => '<div class="prefix-float">/</div>',
    '#suffix' => '<div class="suffix-float">-</div>',

    // Hide this field, if "_drafts" folder is selected, as the date isn't
    // needed on that folder (since the post isn't published yet).
    '#states' => array(
      'visible' => array(
        ':input[name="field_file_path[und][0][directory]"]' => array('value' => '_posts'),
      ),
    ),
  );

  $element['extension'] = array(
    '#title' => t('Extension'),
    '#title_display' => 'invisible',
    '#type' => 'select',
    '#options' => array(
      'md' => 'md',
      'html' => 'html',
    ),
    '#default_value' => $extension,
    '#weight' => 10,
    '#prefix' => '<div class="prefix-float">.</div>',
  );

  $form['field_file_path'][LANGUAGE_NONE][0] += $element;
  $form['field_file_path'][LANGUAGE_NONE][0]['value']['#title_display'] = 'invisible';
  $form['field_file_path'][LANGUAGE_NONE][0]['value']['#attached']['css'][] = drupal_get_path('module', 'dekyll_page') . '/css/dekyll_page.css';

  // Allow floating the inner elements.
  $form['field_file_path']['#attributes']['class'][] = 'clearfix';

  $form['field_file_path'][LANGUAGE_NONE][0]['value']['#element_validate'][] = 'dekyll_page_field_file_path_element_validate';
}

/**
 * After build; Try to set the layout by the node type.
 */
function _dekyll_page_set_layout_by_node_type(&$form) {
  if (empty($form[OG_VOCAB_FIELD][LANGUAGE_NONE][0])) {
    return;
  }
  $element = &$form[OG_VOCAB_FIELD][LANGUAGE_NONE][0];
  foreach ($element as $key => &$value) {
    if (!is_numeric($key) || $value['#title'] != 'layout') {
      continue;
    }

    $node = $value['#entity'];

    if ($delta = array_search($node->type, $value['#options'])) {
      $value['#default_value'] = $delta;
      return;
    }
  }
}

/**
 * Element validate; Prefix the file name with "_posts".
 */
function dekyll_page_field_file_path_element_validate($element, &$form_state) {
  $values = $form_state['values']['field_file_path'][LANGUAGE_NONE][0];

  $file_date = $values['directory'] == '_posts' ? $values['file_date']['date'] . '-' : '';
  $file_path = $values['directory'] . '/' . $file_date . $values['value'] . '.' . $values['extension'];
  form_set_value($element, $file_path, $form_state);
}

/**
 * Implements hook_node_insert().
 */
function dekyll_page_node_insert($node) {
  dekyll_page_queue_export($node);
}

/**
 * Implements hook_node_update().
 */
function dekyll_page_node_update($node) {
  dekyll_page_queue_export($node);
}

/**
 * Create a queue item, in order to write a node to file.
 *
 * @param $node
 *   The node to be written.
 */
function dekyll_page_queue_export($node) {
  if (!isset($node->field_file_path)) {
    return;
  }

  if (!empty($node->_dekyll_sync)) {
    // Node is created or updated on sync.
    return;
  }

  $wrapper = entity_metadata_wrapper('node', $node);

  $queue = DrupalQueue::get('dekyll_export');
  $data = array(
    'gid' => $wrapper->{OG_AUDIENCE_FIELD}->value(array('identifier' => TRUE)),
    'nid' => $node->nid,
    // Get the branch of the node.
    'branch' => dekyll_repository_get_git_branch($node),
    'commit_message' => '',
  );
  $queue->createItem($data);
}

/**
 * Get the permalink of a page or post.
 *
 * @todo: Deal with absolute VS relative path.
 */
function dekyll_page_get_permalink($node) {
  $wrapper = entity_metadata_wrapper('node', $node);

  $permalink = $wrapper->field_permalink->value();

  $file_path = $wrapper->field_file_path->value();

  if ($node->type == 'post') {
    if ($permalink) {
      return $permalink;
    }

    $file_path_elements = explode('/', $file_path);
    $file_path = end($file_path_elements);
    $post_date = '';

    if ($file_path_elements[0] == '_posts') {
      // Remove the date.
      $post_date = substr($file_path, 0, 10);
      $file_path = substr($file_path, 11);
    }


    // Check if this is a category.
    $category = FALSE;
    foreach ($wrapper->{OG_VOCAB_FIELD} as $sub_wrapper) {
      if ($sub_wrapper->vocabulary->label() != 'category') {
        continue;
      }

      $category = $sub_wrapper->label();
      break;
    }

    if ($category) {
      $category_path = array_merge(array($category), explode('-', $post_date));
      $file_path = implode('/', $category_path) . '/' . $file_path;

      // Remove the extension.
      return str_replace(array('.md', '.html'), '', $file_path);

    }
  }

  // @todo: See how permalink works on pages.
  // @todo: improve check.
  return str_replace('.md', '.html', $file_path);
}

/**
 * Find a node by the given file path.
 *
 * @param $branch_id
 *   The branch ID.
 * @param $file_path
 *   The file path to search.
 *
 * @return
 *   A node object, or FALSE if not found.
 */
function dekyll_page_find_node_by_file_path($branch_id, $file_path) {
  $query = new EntityFieldQuery();
  $result = $query
    ->entityCondition('entity_type', 'node')
    ->fieldCondition('field_repo_branch', 'target_id', $branch_id)
    ->fieldCondition('field_file_path', 'value', $file_path)
    ->range(0, 1)
    ->execute();

  if (empty($result['node'])) {
    return;
  }

  $nid = key($result['node']);
  return node_load($nid);
}


/**
 * Implements hook_node_view_alter().
 */
function dekyll_page_node_view_alter(&$build) {
  $node = $build['#node'];
  if (empty($node->nid)) {
    // Node isn't saved yet (e.g. node preview).
    return;
  }

  if ($build['#view_mode'] != 'full') {
    return;
  }

  $wrapper = entity_metadata_wrapper('node', $node);

  if (!isset($wrapper->field_file_path)) {
    return;
  }

  if (!$setting = $wrapper->field_repo_branch->field_jekyll_base_path->value()) {
    return;
  }

  switch ($setting) {
    case 'local':
      $base = 'http://localhost:4000';
      break;

    case 'config':
      $path = dekyll_repository_get_repo_path($node);
      $file_path = $path . '/_config.yml';

      // @todo: Read from _config.yml
      $contents = file_get_contents($file_path);

      // Parse the contents.
      $yaml = new Parser();
      $yaml = $yaml->parse($contents);
      $base = !empty($yaml['production_url']) ? $yaml['production_url'] : '';
      break;

    case 'other':
      $base = $wrapper->field_repo_branch->field_jekyll_base_path_url->value();
  }

  // @todo: How to deal with non-pages?
  $permalink = dekyll_page_get_permalink($node);
  $url = $base . '/' . $permalink;

  // @todo: Add option to disable IFrame?
  $build['dekyll_site'] = array(
    '#weight' => -99,
    'link' => array('#markup' => l('See page', $url)),
  );

  $build_path = dekyll_build_get_build_path($node);

  if ($remote_url = $wrapper->field_repo_branch->field_build_remote_url->value()) {
    $branch_id = $wrapper->field_repo_branch->getIdentifier();
    $url = $remote_url .  str_replace('public://repos', '/builds/', dekyll_repository_get_repo_path($branch_id));
  }
  else {
    $url = file_create_url($build_path). '/' . $permalink;
  }

  // Append a timestamp to the URL to override cache.
  $url .= '?' . time();

  if ($message = dekyll_message_get_message_export($node->nid, DEKYLL_MESSAGE_NEEDS_BUILD)) {
    // Add JS to query the server until the Jekyll build is done.
    ctools_add_js('dekyll_page_message', 'dekyll_page');

    // Pass info about the Message to query.
    $data['dekyll']['basePath'] = base_path();
    $data['dekyll']['page'] = array('mid' => $message->mid, 'url' => $url);
    drupal_add_js($data, 'setting');

    // Set the source to empty, and we will populate it using JS.
    $url = '';
  }

  $build['dekyll_site']['iframe'] = array('#markup' => "<div><iframe id='iframe-preview' style='width: 100%; height: 600px;' src='$url'></iframe></div>");

  // @todo: Add link to github file.
}
